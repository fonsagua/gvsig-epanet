package es.udc.cartolab.gvsig.fonsagua.epanet;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;

import org.apache.commons.io.FileUtils;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;

/**
 * 
 * Checks that the result file generated by epanet for a given input file is the
 * same that a gold file
 * 
 * This is useful to check if a inp generated with the plugin that is expected
 * to be equals to a inp gold file, produces a result file equals to the result
 * gold file
 * 
 */
public class EpanetWrapperTest {

    private static EpanetWrapper epanet;

    @Rule
    public TemporaryFolder temp = new TemporaryFolder();

    @BeforeClass
    public static void setUpBeforeClass() {
	epanet = new EpanetWrapper(TestProperties.epanetPath);
    }

    @Test
    public void reportIsGenerated() throws IOException {
	final String inpPath = "fixtures/one_junction.inp";
	final File copy = copyToTemp(inpPath);
	final String[] rptPath = epanet.execute(copy.getAbsolutePath());
	final File rpt = new File(rptPath[0]);
	assertEquals(rpt.getName(), "one_junction.rpt");
	assertTrue(rpt.exists());
    }

    private File copyToTemp(final String path) throws IOException {
	final File org = new File(path);
	FileUtils.copyFileToDirectory(org, temp.getRoot());
	return FileUtils.getFile(temp.getRoot(), org.getName());
    }

    @Test
    public void oneJunction() throws Exception {
	final File expectedRPT = new File("fixtures/one_junction.rpt");
	final String inpPath = "fixtures/one_junction.inp";
	final File copy = copyToTemp(inpPath);

	String actualRPT[] = epanet.execute(copy.getAbsolutePath());
	assertTrue(rptComparator(expectedRPT, new File(actualRPT[0])));
    }

    @Test
    public void net1() throws Exception {
	final File expectedRPT = new File("fixtures/Net1.rpt");
	final String inpPath = "fixtures/Net1.inp";
	final File copy = copyToTemp(inpPath);
	String actualRPT[] = epanet.execute(copy.getAbsolutePath());
	assertTrue(rptComparator(expectedRPT, new File(actualRPT[0])));
    }

    @Test
    public void net2() throws Exception {
	final File expectedRPT = new File("fixtures/Net2.rpt");
	final String inpPath = "fixtures/Net2.inp";
	final File copy = copyToTemp(inpPath);
	String actualRPT[] = epanet.execute(copy.getAbsolutePath());
	assertTrue(rptComparator(expectedRPT, new File(actualRPT[0])));
    }

    private boolean rptComparator(File f1, File f2) throws Exception {

	FileInputStream fstream1 = new FileInputStream(f1);
	FileInputStream fstream2 = new FileInputStream(f2);

	DataInputStream in1 = new DataInputStream(fstream1);
	DataInputStream in2 = new DataInputStream(fstream2);

	BufferedReader br1 = new BufferedReader(new InputStreamReader(in1));
	BufferedReader br2 = new BufferedReader(new InputStreamReader(in2));

	String strLine1, strLine2;
	br1.readLine();
	br2.readLine();
	while ((strLine1 = br1.readLine()) != null
		&& (strLine2 = br2.readLine()) != null) {
	    if (strLine1.contains("Analysis begun")
		    || strLine1.contains("Analysis ended")) {
		continue;
	    }
	    if (!strLine1.equals(strLine2)) {
		System.out.println(strLine1);
		System.out.println(strLine2);
		return false;
	    }
	}
	return true;
    }
}
